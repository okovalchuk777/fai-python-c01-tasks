#from math import e
from math import factorial as fact
import numpy as np


def combinations(k, n): return fact(n) / (fact(k) * fact(n - k))


#def bernoulli_func(n, k, p): return combinations(k, n) * (p ** k) * ((1 - p) ** (n - k))


#def poisson_func(n, m, p): return (((n * p) ** m) / fact(m)) / (e ** (n * p))


# ===========================================================
# Задача 1.
salary_list = [100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150]

# Находим среднее арифметическое (математическое ожидание) данной выборки

sum01 = 0
count01 = 0

for i in salary_list:
    sum01 += int(i)
    count01 += 1

ev_manual = sum01 / count01

# #Проверка арифметического ожидания средствами numpy
# ev_np = np.mean(salary_list)
# print(ev_np)

print(f'Задача 1.1. Cреднее арифметическое (математическое ожидание) данной выборки равно', round(ev_manual, 3))

# Находим смещенную дисперсию и смещенное среднее квадратичное отклонение для данной выборки

sum02 = 0
count02 = 0

for i in salary_list:
    sum02 += (int(i) - ev_manual) ** 2
    count02 += 1

var_manual_01 = sum02 / count02
std_manual_01 = var_manual_01 ** 0.5

# #Проверка смещенной дисперсии средствами numpy
# var_np_01 = np.var(salary_list)
# print(var_np_01)

# #Проверка смещенного среднего квадратичного отклонения средствами numpy
# std_np_01 = np.std(salary_list)
# print(std_np_01)

print(f'Задача 1.2. Cмещенная дисперсия данной выборки равна', round(var_manual_01, 3))
print(f'Задача 1.3. Смещенное среднее квадратичное отклонение данной выборки равно', round(std_manual_01, 3))

# Находим несмещенную дисперсию и несмещенное среднее квадратичное отклонение для данной выборки

sum03 = 0
count03 = 0

for i in salary_list:
    sum03 += (int(i) - ev_manual) ** 2
    count03 += 1

var_manual_02 = sum03 / (count03 - 1)
std_manual_02 = var_manual_02 ** 0.5

# #Проверка несмещенной дисперсии средствами numpy
# var_np_02 = np.var(salary_list, ddof=1)
# print(var_np_02)

# #Проверка несмещенного среднего квадратичного отклонения средствами numpy
# std_np_02 = np.std(salary_list, ddof=1)
# print(std_np_02)

print(f'Задача 1.4. Несмещенная дисперсия данной выборки равна', round(var_manual_02, 3))
print(f'Задача 1.5. Несмещенное среднее квадратичное отклонение данной выборки равно', round(std_manual_02, 3))

# Задача 2.
# P = ((C(2,5)xC(0,3))/C(2,8))x((C(1,5)xC(3,7))/C(4,12)) + ((C(1,5)xC(1,3))/C(2,8))x((C(2,5)xC(2,7))/C(4,12)) + ((C(0,5)xC(2,3))/C(2,8))x((C(3,5)xC(1,7))/C(4,12))

C = combinations

result02 = ((C(2, 5) * C(0, 3)) / C(2, 8)) * ((C(1, 5) * C(3, 7)) / C(4, 12)) + ((C(1, 5) * C(1, 3)) / C(2, 8)) * (
        (C(2, 5) * C(2, 7)) / C(4, 12)) + ((C(0, 5) * C(2, 3)) / C(2, 8)) * ((C(3, 5) * C(1, 7)) / C(4, 12)) * 100

print(f'Задача 2. Вероятность того, что 3 мяча белые равна', round(result02, 2), f'процентов.')

# Задача 3.
# A - попадание в мишень
# B - спортсмен (B1 - 1-й спортсмен, B2 - 2-й спортсмен, B3 - 3-й спортсмен)
P_B1 = P_B2 = P_B3 = 1 / 3  # вероятность того что стреляет первый, второй, третий спортсмен
P_A_B1 = 0.9  # вероятность попадания в мишень для первого спортсмена
P_A_B2 = 0.8  # вероятность попадания в мишень для второго спортсмена
P_A_B3 = 0.6  # вероятность попадания в мишень для третьего спортсмена
# P_A - полная вероятность попадания в мишень (вероятность что в мишень попадет или первый или второй или третий спортсмен)
P_A = P_B1 * P_A_B1 + P_B2 * P_A_B2 + P_B3 * P_A_B3

# 3.1. Вероятность того, что выстрел произведен (попадает в мишень): a) первым спортсменом
P_B1_A = ((P_A_B1 * P_B1) / P_A) * 100

# 3.2. Вероятность того, что выстрел произведен (попадает в мишень): б) вторым спортсменом
P_B2_A = ((P_A_B2 * P_B2) / P_A) * 100

# 3.3. Вероятность того, что выстрел произведен (попадает в мишень): в) третьим спортсменом
P_B3_A = ((P_A_B3 * P_B3) / P_A) * 100

print(f'Задача 3.1. Вероятность того, что выстрел произведен (попадает в мишень): a) первым спортсменом равна', round(P_B1_A, 2),
      f'процентов.')
print(f'Задача 3.2. Вероятность того, что выстрел произведен (попадает в мишень): б) вторым спортсменом равна', round(P_B2_A, 2),
      f'процентов.')
print(f'Задача 3.3. Вероятность того, что выстрел произведен (попадает в мишень): в) третьим спортсменом равна', round(P_B3_A, 2),
      f'процентов.')

# Задача 4.
# A - сдача первой сессии
# B - студент факультета (Ba - студент факультета A, Bb - студент факультета B, Bc - студент факультета C)
P_Ba = P_Bb = 0.25  # вероятность того что студент с факультета A, B
P_Bc = 0.5  # вероятность того что студент с факультета C
P_A_Ba = 0.8  # вероятность того, что студент факультета A сдаст первую сессию
P_A_Bb = 0.7  # вероятность того, что студент факультета B сдаст первую сессию
P_A_Bc = 0.9  # вероятность того, что студент факультета C сдаст первую сессию
# P_A - полная вероятность сдачи первой сессии (вероятность что первая сессия будет сдана студентом факультета A или факультета B или факультета C)
P_A = P_Ba * P_A_Ba + P_Bb * P_A_Bb + P_Bc * P_A_Bc

# 4.1. Вероятность (сдача первой сессии), что студент учится: a) на факультете A
P_Ba_A = ((P_A_Ba * P_Ba) / P_A) * 100

# 4.2. Вероятность (сдача первой сессии), что студент учится: б) на факультете B
P_Bb_A = ((P_A_Bb * P_Bb) / P_A) * 100

# 4.2. Вероятность (сдача первой сессии), что студент учится: в) на факультете C
P_Bc_A = ((P_A_Bc * P_Bc) / P_A) * 100

print(f'Задача 4.1. Вероятность (сдача первой сессии) того, что студент учится: a) на факультете A равна', round(P_Ba_A, 2),
      f'процентов.')
print(f'Задача 4.2. Вероятность (сдача первой сессии) того, что студент учится: б) на факультете B равна', round(P_Bb_A, 2),
      f'процентов.')
print(f'Задача 4.3. Вероятность (сдача первой сессии) того, что студент учится: в) на факультете C равна', round(P_Bc_A, 2),
      f'процентов.')


# Задача 5.
#A - выход детали из строя в первый месяц
#B - деталь (B1 - 1-я деталь, B2 - 2-я деталь, B3 - 3-я деталь)
#P_B1 = P_B2 = P_B3 = 1/3 - вероятность того что первая, вторая, третья деталь. В этой задаче мы не используем данную вероятность.
P_A_B1 = 0.1 #вероятность выхода из строя в первый месяц первой детали
P_A_B2 = 0.2 #вероятность выхода из строя в первый месяц второй детали
P_A_B3 = 0.25 #вероятность выхода из строя в первый месяц третей детали

#5.1. Вероятность того, что в первый месяц выйдут из строя: а) все детали
P01 = (P_A_B1*P_A_B2*P_A_B3) * 100

#5.2. Вероятность того, что в первый месяц выйдут из строя: б) только две детали
P02 = (P_A_B1*P_A_B2*(1 - P_A_B3) + (1 - P_A_B1)*P_A_B2*P_A_B3 + P_A_B1*(1 - P_A_B2)*P_A_B3) * 100

#5.3. Вероятность того, что в первый месяц выйдут из строя: в) хотя бы одна деталь
P03 = (1 - ((1 - P_A_B1)*(1 - P_A_B2)*(1 - P_A_B3))) * 100

#5.4. Вероятность того, что в первый месяц выйдут из строя: г) от одной до двух деталей
P04 = (P_A_B1*(1 - P_A_B2)*(1 - P_A_B3) + (1 - P_A_B1)*P_A_B2*(1 - P_A_B3) + (1 - P_A_B1)*(1 - P_A_B2)*P_A_B3 + P_A_B1*P_A_B2*(1 - P_A_B3) + (1 - P_A_B1)*P_A_B2*P_A_B3 + P_A_B1*(1 - P_A_B2)*P_A_B3) * 100

print(f'Задача 5.1. Вероятность того, что в первый месяц выйдут из строя: а) все детали равна', round(P01, 2),
      f'процентов.')
print(f'Задача 5.2. Вероятность того, что в первый месяц выйдут из строя: б) только две детали', round(P02, 2),
      f'процентов.')
print(f'Задача 5.3. Вероятность того, что в первый месяц выйдут из строя: в) хотя бы одна деталь', round(P03, 2),
      f'процентов.')
print(f'Задача 5.4. Вероятность того, что в первый месяц выйдут из строя: г) от одной до двух деталей', round(P04, 2),
      f'процентов.')
